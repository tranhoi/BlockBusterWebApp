#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlockBuster.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbBBuster")]
	public partial class dbBBusterDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertadmin(admin instance);
    partial void Updateadmin(admin instance);
    partial void Deleteadmin(admin instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void Insertceleb_job(celeb_job instance);
    partial void Updateceleb_job(celeb_job instance);
    partial void Deleteceleb_job(celeb_job instance);
    partial void Insertcelebrity(celebrity instance);
    partial void Updatecelebrity(celebrity instance);
    partial void Deletecelebrity(celebrity instance);
    partial void Insertchapter(chapter instance);
    partial void Updatechapter(chapter instance);
    partial void Deletechapter(chapter instance);
    partial void Insertcountry(country instance);
    partial void Updatecountry(country instance);
    partial void Deletecountry(country instance);
    partial void Insertfavorite_film(favorite_film instance);
    partial void Updatefavorite_film(favorite_film instance);
    partial void Deletefavorite_film(favorite_film instance);
    partial void Insertfilm(film instance);
    partial void Updatefilm(film instance);
    partial void Deletefilm(film instance);
    partial void Insertfilm_category(film_category instance);
    partial void Updatefilm_category(film_category instance);
    partial void Deletefilm_category(film_category instance);
    partial void Insertfilm_celebrity(film_celebrity instance);
    partial void Updatefilm_celebrity(film_celebrity instance);
    partial void Deletefilm_celebrity(film_celebrity instance);
    partial void Insertfilm_country(film_country instance);
    partial void Updatefilm_country(film_country instance);
    partial void Deletefilm_country(film_country instance);
    partial void Insertform(form instance);
    partial void Updateform(form instance);
    partial void Deleteform(form instance);
    partial void Insertjob(job instance);
    partial void Updatejob(job instance);
    partial void Deletejob(job instance);
    partial void Insertreview(review instance);
    partial void Updatereview(review instance);
    partial void Deletereview(review instance);
    partial void Insertrole(role instance);
    partial void Updaterole(role instance);
    partial void Deleterole(role instance);
    partial void Inserttrailer(trailer instance);
    partial void Updatetrailer(trailer instance);
    partial void Deletetrailer(trailer instance);
    #endregion
		
		public dbBBusterDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dbBBusterConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbBBusterDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbBBusterDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbBBusterDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbBBusterDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<admin> admins
		{
			get
			{
				return this.GetTable<admin>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<category> categories
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<celeb_job> celeb_jobs
		{
			get
			{
				return this.GetTable<celeb_job>();
			}
		}
		
		public System.Data.Linq.Table<celebrity> celebrities
		{
			get
			{
				return this.GetTable<celebrity>();
			}
		}
		
		public System.Data.Linq.Table<chapter> chapters
		{
			get
			{
				return this.GetTable<chapter>();
			}
		}
		
		public System.Data.Linq.Table<country> countries
		{
			get
			{
				return this.GetTable<country>();
			}
		}
		
		public System.Data.Linq.Table<favorite_film> favorite_films
		{
			get
			{
				return this.GetTable<favorite_film>();
			}
		}
		
		public System.Data.Linq.Table<film> films
		{
			get
			{
				return this.GetTable<film>();
			}
		}
		
		public System.Data.Linq.Table<film_category> film_categories
		{
			get
			{
				return this.GetTable<film_category>();
			}
		}
		
		public System.Data.Linq.Table<film_celebrity> film_celebrities
		{
			get
			{
				return this.GetTable<film_celebrity>();
			}
		}
		
		public System.Data.Linq.Table<film_country> film_countries
		{
			get
			{
				return this.GetTable<film_country>();
			}
		}
		
		public System.Data.Linq.Table<form> forms
		{
			get
			{
				return this.GetTable<form>();
			}
		}
		
		public System.Data.Linq.Table<job> jobs
		{
			get
			{
				return this.GetTable<job>();
			}
		}
		
		public System.Data.Linq.Table<review> reviews
		{
			get
			{
				return this.GetTable<review>();
			}
		}
		
		public System.Data.Linq.Table<role> roles
		{
			get
			{
				return this.GetTable<role>();
			}
		}
		
		public System.Data.Linq.Table<trailer> trailers
		{
			get
			{
				return this.GetTable<trailer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.admin")]
	public partial class admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<int> _position_id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onposition_idChanging(System.Nullable<int> value);
    partial void Onposition_idChanged();
    #endregion
		
		public admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position_id", DbType="Int")]
		public System.Nullable<int> position_id
		{
			get
			{
				return this._position_id;
			}
			set
			{
				if ((this._position_id != value))
				{
					this.Onposition_idChanging(value);
					this.SendPropertyChanging();
					this._position_id = value;
					this.SendPropertyChanged("position_id");
					this.Onposition_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _email;
		
		private string _password;
		
		private string _first_name;
		
		private string _last_name;
		
		private System.Nullable<System.DateTime> _created;
		
		private EntitySet<favorite_film> _favorite_films;
		
		private EntitySet<review> _reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    partial void OncreatedChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedChanged();
    #endregion
		
		public user()
		{
			this._favorite_films = new EntitySet<favorite_film>(new Action<favorite_film>(this.attach_favorite_films), new Action<favorite_film>(this.detach_favorite_films));
			this._reviews = new EntitySet<review>(new Action<review>(this.attach_reviews), new Action<review>(this.detach_reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(16)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="VarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="VarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="Date")]
		public System.Nullable<System.DateTime> created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_favorite_film", Storage="_favorite_films", ThisKey="id", OtherKey="user_id")]
		public EntitySet<favorite_film> favorite_films
		{
			get
			{
				return this._favorite_films;
			}
			set
			{
				this._favorite_films.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_review", Storage="_reviews", ThisKey="id", OtherKey="user_id")]
		public EntitySet<review> reviews
		{
			get
			{
				return this._reviews;
			}
			set
			{
				this._reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_favorite_films(favorite_film entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_favorite_films(favorite_film entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_reviews(review entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_reviews(review entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _color;
		
		private EntitySet<film_category> _film_categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    #endregion
		
		public category()
		{
			this._film_categories = new EntitySet<film_category>(new Action<film_category>(this.attach_film_categories), new Action<film_category>(this.detach_film_categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="VarChar(50)")]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_film_category", Storage="_film_categories", ThisKey="id", OtherKey="category_id")]
		public EntitySet<film_category> film_categories
		{
			get
			{
				return this._film_categories;
			}
			set
			{
				this._film_categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_film_categories(film_category entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_film_categories(film_category entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.celeb_job")]
	public partial class celeb_job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _celeb_id;
		
		private System.Nullable<int> _job_id;
		
		private EntityRef<celebrity> _celebrity;
		
		private EntityRef<job> _job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onceleb_idChanging(System.Nullable<int> value);
    partial void Onceleb_idChanged();
    partial void Onjob_idChanging(System.Nullable<int> value);
    partial void Onjob_idChanged();
    #endregion
		
		public celeb_job()
		{
			this._celebrity = default(EntityRef<celebrity>);
			this._job = default(EntityRef<job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_celeb_id", DbType="Int")]
		public System.Nullable<int> celeb_id
		{
			get
			{
				return this._celeb_id;
			}
			set
			{
				if ((this._celeb_id != value))
				{
					if (this._celebrity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onceleb_idChanging(value);
					this.SendPropertyChanging();
					this._celeb_id = value;
					this.SendPropertyChanged("celeb_id");
					this.Onceleb_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_job_id", DbType="Int")]
		public System.Nullable<int> job_id
		{
			get
			{
				return this._job_id;
			}
			set
			{
				if ((this._job_id != value))
				{
					if (this._job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onjob_idChanging(value);
					this.SendPropertyChanging();
					this._job_id = value;
					this.SendPropertyChanged("job_id");
					this.Onjob_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="celebrity_celeb_job", Storage="_celebrity", ThisKey="celeb_id", OtherKey="id", IsForeignKey=true)]
		public celebrity celebrity
		{
			get
			{
				return this._celebrity.Entity;
			}
			set
			{
				celebrity previousValue = this._celebrity.Entity;
				if (((previousValue != value) 
							|| (this._celebrity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._celebrity.Entity = null;
						previousValue.celeb_jobs.Remove(this);
					}
					this._celebrity.Entity = value;
					if ((value != null))
					{
						value.celeb_jobs.Add(this);
						this._celeb_id = value.id;
					}
					else
					{
						this._celeb_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("celebrity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_celeb_job", Storage="_job", ThisKey="job_id", OtherKey="id", IsForeignKey=true)]
		public job job
		{
			get
			{
				return this._job.Entity;
			}
			set
			{
				job previousValue = this._job.Entity;
				if (((previousValue != value) 
							|| (this._job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._job.Entity = null;
						previousValue.celeb_jobs.Remove(this);
					}
					this._job.Entity = value;
					if ((value != null))
					{
						value.celeb_jobs.Add(this);
						this._job_id = value.id;
					}
					else
					{
						this._job_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.celebrity")]
	public partial class celebrity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _description;
		
		private string _avatar;
		
		private System.Nullable<System.DateTime> _birthday;
		
		private System.Nullable<int> _country_id;
		
		private EntitySet<celeb_job> _celeb_jobs;
		
		private EntitySet<film_celebrity> _film_celebrities;
		
		private EntityRef<country> _country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnavatarChanging(string value);
    partial void OnavatarChanged();
    partial void OnbirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthdayChanged();
    partial void Oncountry_idChanging(System.Nullable<int> value);
    partial void Oncountry_idChanged();
    #endregion
		
		public celebrity()
		{
			this._celeb_jobs = new EntitySet<celeb_job>(new Action<celeb_job>(this.attach_celeb_jobs), new Action<celeb_job>(this.detach_celeb_jobs));
			this._film_celebrities = new EntitySet<film_celebrity>(new Action<film_celebrity>(this.attach_film_celebrities), new Action<film_celebrity>(this.detach_film_celebrities));
			this._country = default(EntityRef<country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(5000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="VarChar(20)")]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="Date")]
		public System.Nullable<System.DateTime> birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country_id", DbType="Int")]
		public System.Nullable<int> country_id
		{
			get
			{
				return this._country_id;
			}
			set
			{
				if ((this._country_id != value))
				{
					if (this._country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncountry_idChanging(value);
					this.SendPropertyChanging();
					this._country_id = value;
					this.SendPropertyChanged("country_id");
					this.Oncountry_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="celebrity_celeb_job", Storage="_celeb_jobs", ThisKey="id", OtherKey="celeb_id")]
		public EntitySet<celeb_job> celeb_jobs
		{
			get
			{
				return this._celeb_jobs;
			}
			set
			{
				this._celeb_jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="celebrity_film_celebrity", Storage="_film_celebrities", ThisKey="id", OtherKey="celeb_id")]
		public EntitySet<film_celebrity> film_celebrities
		{
			get
			{
				return this._film_celebrities;
			}
			set
			{
				this._film_celebrities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="country_celebrity", Storage="_country", ThisKey="country_id", OtherKey="id", IsForeignKey=true)]
		public country country
		{
			get
			{
				return this._country.Entity;
			}
			set
			{
				country previousValue = this._country.Entity;
				if (((previousValue != value) 
							|| (this._country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._country.Entity = null;
						previousValue.celebrities.Remove(this);
					}
					this._country.Entity = value;
					if ((value != null))
					{
						value.celebrities.Add(this);
						this._country_id = value.id;
					}
					else
					{
						this._country_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_celeb_jobs(celeb_job entity)
		{
			this.SendPropertyChanging();
			entity.celebrity = this;
		}
		
		private void detach_celeb_jobs(celeb_job entity)
		{
			this.SendPropertyChanging();
			entity.celebrity = null;
		}
		
		private void attach_film_celebrities(film_celebrity entity)
		{
			this.SendPropertyChanging();
			entity.celebrity = this;
		}
		
		private void detach_film_celebrities(film_celebrity entity)
		{
			this.SendPropertyChanging();
			entity.celebrity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.chapter")]
	public partial class chapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _name;
		
		private System.Nullable<int> _film_id;
		
		private string _source;
		
		private EntityRef<film> _film;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(System.Nullable<int> value);
    partial void OnnameChanged();
    partial void Onfilm_idChanging(System.Nullable<int> value);
    partial void Onfilm_idChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    #endregion
		
		public chapter()
		{
			this._film = default(EntityRef<film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Int")]
		public System.Nullable<int> name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", DbType="Int")]
		public System.Nullable<int> film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="VarChar(100)")]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_chapter", Storage="_film", ThisKey="film_id", OtherKey="id", IsForeignKey=true)]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.chapters.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.chapters.Add(this);
						this._film_id = value.id;
					}
					else
					{
						this._film_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.country")]
	public partial class country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<celebrity> _celebrities;
		
		private EntitySet<film_country> _film_countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public country()
		{
			this._celebrities = new EntitySet<celebrity>(new Action<celebrity>(this.attach_celebrities), new Action<celebrity>(this.detach_celebrities));
			this._film_countries = new EntitySet<film_country>(new Action<film_country>(this.attach_film_countries), new Action<film_country>(this.detach_film_countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="country_celebrity", Storage="_celebrities", ThisKey="id", OtherKey="country_id")]
		public EntitySet<celebrity> celebrities
		{
			get
			{
				return this._celebrities;
			}
			set
			{
				this._celebrities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="country_film_country", Storage="_film_countries", ThisKey="id", OtherKey="country_id")]
		public EntitySet<film_country> film_countries
		{
			get
			{
				return this._film_countries;
			}
			set
			{
				this._film_countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_celebrities(celebrity entity)
		{
			this.SendPropertyChanging();
			entity.country = this;
		}
		
		private void detach_celebrities(celebrity entity)
		{
			this.SendPropertyChanging();
			entity.country = null;
		}
		
		private void attach_film_countries(film_country entity)
		{
			this.SendPropertyChanging();
			entity.country = this;
		}
		
		private void detach_film_countries(film_country entity)
		{
			this.SendPropertyChanging();
			entity.country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.favorite_film")]
	public partial class favorite_film : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<int> _film_id;
		
		private EntityRef<user> _user;
		
		private EntityRef<film> _film;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onfilm_idChanging(System.Nullable<int> value);
    partial void Onfilm_idChanged();
    #endregion
		
		public favorite_film()
		{
			this._user = default(EntityRef<user>);
			this._film = default(EntityRef<film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", DbType="Int")]
		public System.Nullable<int> film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_favorite_film", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.favorite_films.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.favorite_films.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_favorite_film", Storage="_film", ThisKey="film_id", OtherKey="id", IsForeignKey=true)]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.favorite_films.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.favorite_films.Add(this);
						this._film_id = value.id;
					}
					else
					{
						this._film_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film")]
	public partial class film : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _release;
		
		private string _image_link;
		
		private string _source;
		
		private System.Nullable<int> _view_count;
		
		private string _description;
		
		private System.Nullable<System.DateTime> _created;
		
		private System.Nullable<int> _form_id;
		
		private System.Nullable<int> _rate;
		
		private EntitySet<chapter> _chapters;
		
		private EntitySet<favorite_film> _favorite_films;
		
		private EntitySet<film_category> _film_categories;
		
		private EntitySet<film_celebrity> _film_celebrities;
		
		private EntitySet<film_country> _film_countries;
		
		private EntitySet<review> _reviews;
		
		private EntityRef<form> _form;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnreleaseChanging(System.Nullable<System.DateTime> value);
    partial void OnreleaseChanged();
    partial void Onimage_linkChanging(string value);
    partial void Onimage_linkChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    partial void Onview_countChanging(System.Nullable<int> value);
    partial void Onview_countChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncreatedChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedChanged();
    partial void Onform_idChanging(System.Nullable<int> value);
    partial void Onform_idChanged();
    partial void OnrateChanging(System.Nullable<int> value);
    partial void OnrateChanged();
    #endregion
		
		public film()
		{
			this._chapters = new EntitySet<chapter>(new Action<chapter>(this.attach_chapters), new Action<chapter>(this.detach_chapters));
			this._favorite_films = new EntitySet<favorite_film>(new Action<favorite_film>(this.attach_favorite_films), new Action<favorite_film>(this.detach_favorite_films));
			this._film_categories = new EntitySet<film_category>(new Action<film_category>(this.attach_film_categories), new Action<film_category>(this.detach_film_categories));
			this._film_celebrities = new EntitySet<film_celebrity>(new Action<film_celebrity>(this.attach_film_celebrities), new Action<film_celebrity>(this.detach_film_celebrities));
			this._film_countries = new EntitySet<film_country>(new Action<film_country>(this.attach_film_countries), new Action<film_country>(this.detach_film_countries));
			this._reviews = new EntitySet<review>(new Action<review>(this.attach_reviews), new Action<review>(this.detach_reviews));
			this._form = default(EntityRef<form>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_release", DbType="Date")]
		public System.Nullable<System.DateTime> release
		{
			get
			{
				return this._release;
			}
			set
			{
				if ((this._release != value))
				{
					this.OnreleaseChanging(value);
					this.SendPropertyChanging();
					this._release = value;
					this.SendPropertyChanged("release");
					this.OnreleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_link", DbType="VarChar(100)")]
		public string image_link
		{
			get
			{
				return this._image_link;
			}
			set
			{
				if ((this._image_link != value))
				{
					this.Onimage_linkChanging(value);
					this.SendPropertyChanging();
					this._image_link = value;
					this.SendPropertyChanged("image_link");
					this.Onimage_linkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="VarChar(200)")]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_view_count", DbType="Int")]
		public System.Nullable<int> view_count
		{
			get
			{
				return this._view_count;
			}
			set
			{
				if ((this._view_count != value))
				{
					this.Onview_countChanging(value);
					this.SendPropertyChanging();
					this._view_count = value;
					this.SendPropertyChanged("view_count");
					this.Onview_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(5000)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime")]
		public System.Nullable<System.DateTime> created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_form_id", DbType="Int")]
		public System.Nullable<int> form_id
		{
			get
			{
				return this._form_id;
			}
			set
			{
				if ((this._form_id != value))
				{
					if (this._form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onform_idChanging(value);
					this.SendPropertyChanging();
					this._form_id = value;
					this.SendPropertyChanged("form_id");
					this.Onform_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Int")]
		public System.Nullable<int> rate
		{
			get
			{
				return this._rate;
			}
			set
			{
				if ((this._rate != value))
				{
					this.OnrateChanging(value);
					this.SendPropertyChanging();
					this._rate = value;
					this.SendPropertyChanged("rate");
					this.OnrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_chapter", Storage="_chapters", ThisKey="id", OtherKey="film_id")]
		public EntitySet<chapter> chapters
		{
			get
			{
				return this._chapters;
			}
			set
			{
				this._chapters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_favorite_film", Storage="_favorite_films", ThisKey="id", OtherKey="film_id")]
		public EntitySet<favorite_film> favorite_films
		{
			get
			{
				return this._favorite_films;
			}
			set
			{
				this._favorite_films.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_film_category", Storage="_film_categories", ThisKey="id", OtherKey="film_id")]
		public EntitySet<film_category> film_categories
		{
			get
			{
				return this._film_categories;
			}
			set
			{
				this._film_categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_film_celebrity", Storage="_film_celebrities", ThisKey="id", OtherKey="film_id")]
		public EntitySet<film_celebrity> film_celebrities
		{
			get
			{
				return this._film_celebrities;
			}
			set
			{
				this._film_celebrities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_film_country", Storage="_film_countries", ThisKey="id", OtherKey="film_id")]
		public EntitySet<film_country> film_countries
		{
			get
			{
				return this._film_countries;
			}
			set
			{
				this._film_countries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_review", Storage="_reviews", ThisKey="id", OtherKey="film_id")]
		public EntitySet<review> reviews
		{
			get
			{
				return this._reviews;
			}
			set
			{
				this._reviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="form_film", Storage="_form", ThisKey="form_id", OtherKey="id", IsForeignKey=true)]
		public form form
		{
			get
			{
				return this._form.Entity;
			}
			set
			{
				form previousValue = this._form.Entity;
				if (((previousValue != value) 
							|| (this._form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._form.Entity = null;
						previousValue.films.Remove(this);
					}
					this._form.Entity = value;
					if ((value != null))
					{
						value.films.Add(this);
						this._form_id = value.id;
					}
					else
					{
						this._form_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("form");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_chapters(chapter entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_chapters(chapter entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
		
		private void attach_favorite_films(favorite_film entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_favorite_films(favorite_film entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
		
		private void attach_film_categories(film_category entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_film_categories(film_category entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
		
		private void attach_film_celebrities(film_celebrity entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_film_celebrities(film_celebrity entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
		
		private void attach_film_countries(film_country entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_film_countries(film_country entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
		
		private void attach_reviews(review entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_reviews(review entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_category")]
	public partial class film_category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _film_id;
		
		private System.Nullable<int> _category_id;
		
		private EntityRef<category> _category;
		
		private EntityRef<film> _film;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfilm_idChanging(System.Nullable<int> value);
    partial void Onfilm_idChanged();
    partial void Oncategory_idChanging(System.Nullable<int> value);
    partial void Oncategory_idChanged();
    #endregion
		
		public film_category()
		{
			this._category = default(EntityRef<category>);
			this._film = default(EntityRef<film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", DbType="Int")]
		public System.Nullable<int> film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="Int")]
		public System.Nullable<int> category_id
		{
			get
			{
				return this._category_id;
			}
			set
			{
				if ((this._category_id != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategory_idChanging(value);
					this.SendPropertyChanging();
					this._category_id = value;
					this.SendPropertyChanged("category_id");
					this.Oncategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_film_category", Storage="_category", ThisKey="category_id", OtherKey="id", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.film_categories.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.film_categories.Add(this);
						this._category_id = value.id;
					}
					else
					{
						this._category_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_film_category", Storage="_film", ThisKey="film_id", OtherKey="id", IsForeignKey=true)]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.film_categories.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.film_categories.Add(this);
						this._film_id = value.id;
					}
					else
					{
						this._film_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_celebrity")]
	public partial class film_celebrity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _film_id;
		
		private System.Nullable<int> _celeb_id;
		
		private System.Nullable<int> _role_id;
		
		private EntityRef<celebrity> _celebrity;
		
		private EntityRef<film> _film;
		
		private EntityRef<role> _role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfilm_idChanging(System.Nullable<int> value);
    partial void Onfilm_idChanged();
    partial void Onceleb_idChanging(System.Nullable<int> value);
    partial void Onceleb_idChanged();
    partial void Onrole_idChanging(System.Nullable<int> value);
    partial void Onrole_idChanged();
    #endregion
		
		public film_celebrity()
		{
			this._celebrity = default(EntityRef<celebrity>);
			this._film = default(EntityRef<film>);
			this._role = default(EntityRef<role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", DbType="Int")]
		public System.Nullable<int> film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_celeb_id", DbType="Int")]
		public System.Nullable<int> celeb_id
		{
			get
			{
				return this._celeb_id;
			}
			set
			{
				if ((this._celeb_id != value))
				{
					if (this._celebrity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onceleb_idChanging(value);
					this.SendPropertyChanging();
					this._celeb_id = value;
					this.SendPropertyChanged("celeb_id");
					this.Onceleb_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="Int")]
		public System.Nullable<int> role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="celebrity_film_celebrity", Storage="_celebrity", ThisKey="celeb_id", OtherKey="id", IsForeignKey=true)]
		public celebrity celebrity
		{
			get
			{
				return this._celebrity.Entity;
			}
			set
			{
				celebrity previousValue = this._celebrity.Entity;
				if (((previousValue != value) 
							|| (this._celebrity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._celebrity.Entity = null;
						previousValue.film_celebrities.Remove(this);
					}
					this._celebrity.Entity = value;
					if ((value != null))
					{
						value.film_celebrities.Add(this);
						this._celeb_id = value.id;
					}
					else
					{
						this._celeb_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("celebrity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_film_celebrity", Storage="_film", ThisKey="film_id", OtherKey="id", IsForeignKey=true)]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.film_celebrities.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.film_celebrities.Add(this);
						this._film_id = value.id;
					}
					else
					{
						this._film_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_film_celebrity", Storage="_role", ThisKey="role_id", OtherKey="id", IsForeignKey=true)]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.film_celebrities.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.film_celebrities.Add(this);
						this._role_id = value.id;
					}
					else
					{
						this._role_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film_country")]
	public partial class film_country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _film_id;
		
		private System.Nullable<int> _country_id;
		
		private EntityRef<country> _country;
		
		private EntityRef<film> _film;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfilm_idChanging(System.Nullable<int> value);
    partial void Onfilm_idChanged();
    partial void Oncountry_idChanging(System.Nullable<int> value);
    partial void Oncountry_idChanged();
    #endregion
		
		public film_country()
		{
			this._country = default(EntityRef<country>);
			this._film = default(EntityRef<film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", DbType="Int")]
		public System.Nullable<int> film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country_id", DbType="Int")]
		public System.Nullable<int> country_id
		{
			get
			{
				return this._country_id;
			}
			set
			{
				if ((this._country_id != value))
				{
					if (this._country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncountry_idChanging(value);
					this.SendPropertyChanging();
					this._country_id = value;
					this.SendPropertyChanged("country_id");
					this.Oncountry_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="country_film_country", Storage="_country", ThisKey="country_id", OtherKey="id", IsForeignKey=true)]
		public country country
		{
			get
			{
				return this._country.Entity;
			}
			set
			{
				country previousValue = this._country.Entity;
				if (((previousValue != value) 
							|| (this._country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._country.Entity = null;
						previousValue.film_countries.Remove(this);
					}
					this._country.Entity = value;
					if ((value != null))
					{
						value.film_countries.Add(this);
						this._country_id = value.id;
					}
					else
					{
						this._country_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_film_country", Storage="_film", ThisKey="film_id", OtherKey="id", IsForeignKey=true)]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.film_countries.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.film_countries.Add(this);
						this._film_id = value.id;
					}
					else
					{
						this._film_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.form")]
	public partial class form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<film> _films;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public form()
		{
			this._films = new EntitySet<film>(new Action<film>(this.attach_films), new Action<film>(this.detach_films));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Char(10)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="form_film", Storage="_films", ThisKey="id", OtherKey="form_id")]
		public EntitySet<film> films
		{
			get
			{
				return this._films;
			}
			set
			{
				this._films.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_films(film entity)
		{
			this.SendPropertyChanging();
			entity.form = this;
		}
		
		private void detach_films(film entity)
		{
			this.SendPropertyChanging();
			entity.form = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.job")]
	public partial class job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<celeb_job> _celeb_jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public job()
		{
			this._celeb_jobs = new EntitySet<celeb_job>(new Action<celeb_job>(this.attach_celeb_jobs), new Action<celeb_job>(this.detach_celeb_jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(10)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_celeb_job", Storage="_celeb_jobs", ThisKey="id", OtherKey="job_id")]
		public EntitySet<celeb_job> celeb_jobs
		{
			get
			{
				return this._celeb_jobs;
			}
			set
			{
				this._celeb_jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_celeb_jobs(celeb_job entity)
		{
			this.SendPropertyChanging();
			entity.job = this;
		}
		
		private void detach_celeb_jobs(celeb_job entity)
		{
			this.SendPropertyChanging();
			entity.job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.review")]
	public partial class review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _point;
		
		private string _title;
		
		private string _comment;
		
		private System.Nullable<int> _film_id;
		
		private System.Nullable<int> _user_id;
		
		private EntityRef<film> _film;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpointChanging(System.Nullable<int> value);
    partial void OnpointChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void Onfilm_idChanging(System.Nullable<int> value);
    partial void Onfilm_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    #endregion
		
		public review()
		{
			this._film = default(EntityRef<film>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_point", DbType="Int")]
		public System.Nullable<int> point
		{
			get
			{
				return this._point;
			}
			set
			{
				if ((this._point != value))
				{
					this.OnpointChanging(value);
					this.SendPropertyChanging();
					this._point = value;
					this.SendPropertyChanged("point");
					this.OnpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(100)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(2000)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", DbType="Int")]
		public System.Nullable<int> film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_review", Storage="_film", ThisKey="film_id", OtherKey="id", IsForeignKey=true)]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.reviews.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.reviews.Add(this);
						this._film_id = value.id;
					}
					else
					{
						this._film_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_review", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.reviews.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.reviews.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role")]
	public partial class role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<bool> _display;
		
		private EntitySet<film_celebrity> _film_celebrities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndisplayChanging(System.Nullable<bool> value);
    partial void OndisplayChanged();
    #endregion
		
		public role()
		{
			this._film_celebrities = new EntitySet<film_celebrity>(new Action<film_celebrity>(this.attach_film_celebrities), new Action<film_celebrity>(this.detach_film_celebrities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_display", DbType="Bit")]
		public System.Nullable<bool> display
		{
			get
			{
				return this._display;
			}
			set
			{
				if ((this._display != value))
				{
					this.OndisplayChanging(value);
					this.SendPropertyChanging();
					this._display = value;
					this.SendPropertyChanged("display");
					this.OndisplayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_film_celebrity", Storage="_film_celebrities", ThisKey="id", OtherKey="role_id")]
		public EntitySet<film_celebrity> film_celebrities
		{
			get
			{
				return this._film_celebrities;
			}
			set
			{
				this._film_celebrities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_film_celebrities(film_celebrity entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_film_celebrities(film_celebrity entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trailer")]
	public partial class trailer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _source;
		
		private string _image_link;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    partial void Onimage_linkChanging(string value);
    partial void Onimage_linkChanged();
    #endregion
		
		public trailer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_source", DbType="VarChar(50)")]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image_link", DbType="VarChar(50)")]
		public string image_link
		{
			get
			{
				return this._image_link;
			}
			set
			{
				if ((this._image_link != value))
				{
					this.Onimage_linkChanging(value);
					this.SendPropertyChanging();
					this._image_link = value;
					this.SendPropertyChanged("image_link");
					this.Onimage_linkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
